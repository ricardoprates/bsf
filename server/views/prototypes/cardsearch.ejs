<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>card search prototype</title>
    <script src="/lib/angular/angular.min.js"></script>
</head>
<body>

<div ng-app="cardSearch" ng-controller="cardsController">
    <label for="search-box">Search:</label>
    <input id="search-box" type="search" ng-model="searchText"/>
    <table>
        <tr ng-repeat="x in minions | filter:matchAllWords(searchText) | orderBy: 'name'">
            <td>{{ x.name }}</td>
        </tr>
    </table>

    <table>
        <tr ng-repeat="x in spells | filter:matchAllWords(searchText) | orderBy: 'name'">
            <td>{{ x.name }}</td>
        </tr>
    </table>

    <table>
        <tr ng-repeat="x in weapons | filter:matchAllWords(searchText) | orderBy: 'name'">
            <td>{{ x.name }}</td>
        </tr>
    </table>
</div>

<script>
    angular.module('cardSearch', []).controller('cardsController', function ($scope, $http)
    {
        $http.get("/hearthstone/data/minions.json").success(function (response)
        {
            $scope.minions = response;
        });

        $http.get("/hearthstone/data/spells.json").success(function (response)
        {
            $scope.spells = response;
        });

        $http.get("/hearthstone/data/weapons.json").success(function (response)
        {
            $scope.weapons = response;
        });

        $scope.matchAllWords = function (searchText)
        {
            var _nicknames = {
                'kt': 'kelthuzad',
                'bgh': 'biggamehunter',
                'swagaros': 'ragnarosthefirelord'
            }

            var misc = {
                canonicalForm: function (name)
                {
                    return name.replace(/\W|_/g, '').toLowerCase();
                },

                isNickname: function (nick, name)
                {
                    return (_nicknames[nick] == name);
                }
            }

            return function (item)
            {
                if (!searchText && !(searchText === 0))
                {
                    return true;
                }

                var splitTokens = searchText.toString().split(' ');

                var minionSpec = /^(\d+)\/(\d+)$/;                              //e.g.: 3/4
                var propertySpec = /^([a-z]+)=([a-z0-9]+(?:\|[a-z0-9]+)*)$/i;   //e.g.: cost=1|2

                var searchTokens = [];
                for (i = 0; i < splitTokens.length; i++)
                {
                    var matches;
                    var rawToken = splitTokens[i];

                    if (matches = rawToken.match(minionSpec))
                    {
                        var attack = matches[1];
                        var health = matches[2];
                        searchTokens.push({key: 'attack', value: attack});
                        searchTokens.push({key: 'health', value: health});
                    }
                    else if (matches = rawToken.match(propertySpec))
                    {
                        var propertyName = matches[1];
                        var propertyValues = matches[2];
                        searchTokens.push({key: propertyName, value: propertyValues});
                    }
                    else
                    {
                        searchTokens.push({key: 'any', value: misc.canonicalForm(rawToken)});
                    }
                }

                for (i = 0; i < searchTokens.length; i++)
                {
                    var foundMatch = false;
                    var token = searchTokens[i];

                    for (var property in item)
                    {
                        if (property !== '$$hashKey' && (token.key == 'any' || token.key == property))
                        {
                            var value = item[property];
                            value = misc.canonicalForm(value);

                            if (token.value && (value == token.value || value.search(token.value) != -1 || misc.isNickname(token.value, value)))
                            {
                                foundMatch = true;
                                break;
                            }
                        }
                    }

                    if (!foundMatch)
                    {
                        return false;
                    }
                }

                return true;
            }
        }
    });
</script>

</body>
</html>