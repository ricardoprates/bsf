<!DOCTYPE html>
<html>
<head lang="en">
    <title><%= locals.title %></title>

    <script src="/lib/jquery/jquery-2.1.3.min.js"></script>
    <script src="/lib/jquery-ui/jquery-ui.min.js"></script>
    <script src="/lib/jquery-ui-touch-punch/jquery.ui.touch-punch.min.js"></script>
    <link href="/lib/jquery-ui/jquery-ui.css" rel="stylesheet">

    <script src="/lib/angular/angular.min.js"></script>

    <script src="/hearthstone/widgets/deck.js"></script>
    <link href="/hearthstone/css/bsf-hearthstone.css" rel="stylesheet">
</head>
<body>
<div class="top-menu">
    <div class="cleanmeup" style="margin-left: 50px; padding-top: 5px">
        <img src="/bsf/images/bsf-logo.svg" height="24">
        <span style="color: white">BestServedFree</span>
    </div>
</div>
<div class="page">
    <div class="head"></div>
    <div class="hearthstone">
        <div class="deck-editor" ng-app="cardSearch" ng-controller="cardsController">
            <div class="row">
                <div id="menu">
                </div>
            </div>
            <div class="row">
                <div id="search">
                    <label for="search-box">Search:</label>
                    <input id="search-box" type="search" ng-model="searchText" style="margin: 10px 0 0 10px"/>
                    <button ng-click="previousPage()">Previous</button>
                    <button ng-click="nextPage()">Next</button>
                </div>
            </div>
            <div class="row">
                <div id="deck"></div>
                <div id="collection">
                    <div ng-repeat="x in cards | filter:matchAllWords(searchText) | orderBy: ['cost','name'] | slice:pageStart:pageEnd">
                        <div id="{{ misc.canonicalForm(x.name) }}" class="card">
                            <img src="/hearthstone/images/collectible/{{ misc.canonicalForm(x.name) }}.png"
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var app = angular.module('cardSearch', []);

    app.filter('slice', function() {
        return function(arr, start, end) {
            return (arr || []).slice(start, end);
        };
    });

    app.controller('cardsController', function ($scope, $http)
    {
        $scope.cards = [];

        $http.get("/hearthstone/data/minions.json").success(function (response)
        {
            Array.prototype.push.apply($scope.cards, response);
        });

        $http.get("/hearthstone/data/spells.json").success(function (response)
        {
            Array.prototype.push.apply($scope.cards, response);
        });

        $http.get("/hearthstone/data/weapons.json").success(function (response)
        {
            Array.prototype.push.apply($scope.cards, response);
        });

        var _nicknames = {
            'kt': 'kelthuzad',
            'bgh': 'biggamehunter',
            'swagaros': 'ragnarosthefirelord'
        }

        $scope.misc = {
            canonicalForm: function (name)
            {
                return name.replace(/\W|_/g, '').toLowerCase();
            },

            isNickname: function (nick, name)
            {
                return (_nicknames[nick] == name);
            }
        }

        $scope.pageStart = 0;
        $scope.pageSize = 10;
        $scope.pageEnd = $scope.pageSize;

        $scope.nextPage = function()
        {
            $scope.pageStart += $scope.pageSize;
            $scope.pageEnd += $scope.pageSize;
        }

        $scope.previousPage = function()
        {
            $scope.pageStart -= $scope.pageSize;
            if($scope.pageStart < 0)
            {
                $scope.pageStart = 0;
            }
            $scope.pageEnd = $scope.pageStart + $scope.pageSize;
        }

        $scope.matchAllWords = function (searchText)
        {
            return function (item)
            {
                if (!searchText && !(searchText === 0))
                {
                    return true;
                }

                var splitTokens = searchText.toString().split(' ');

                var minionSpec = /^(\d+)\/(\d+)$/;                              //e.g.: 3/4
                var propertySpec = /^([a-z]+)=([a-z0-9]+(?:\|[a-z0-9]+)*)$/i;   //e.g.: cost=1|2

                var searchTokens = [];
                for (i = 0; i < splitTokens.length; i++)
                {
                    var matches;
                    var rawToken = splitTokens[i];

                    if (matches = rawToken.match(minionSpec))
                    {
                        var attack = matches[1];
                        var health = matches[2];
                        searchTokens.push({key: 'attack', value: attack});
                        searchTokens.push({key: 'health', value: health});
                    }
                    else if (matches = rawToken.match(propertySpec))
                    {
                        var propertyName = matches[1];
                        var propertyValues = matches[2];
                        searchTokens.push({key: propertyName, value: propertyValues});
                    }
                    else
                    {
                        searchTokens.push({key: 'any', value: $scope.misc.canonicalForm(rawToken)});
                    }
                }

                for (i = 0; i < searchTokens.length; i++)
                {
                    var foundMatch = false;
                    var token = searchTokens[i];

                    for (var property in item)
                    {
                        if (property !== '$$hashKey' && (token.key == 'any' || token.key == property))
                        {
                            var value = item[property];
                            value = $scope.misc.canonicalForm(value);

                            if (token.value && (value == token.value || value.search(token.value) != -1 || $scope.misc.isNickname(token.value, value)))
                            {
                                foundMatch = true;
                                break;
                            }
                        }
                    }

                    if (!foundMatch)
                    {
                        return false;
                    }
                }

                return true;
            }
        }
    });

//    $(document).ready(function ()
//    {
//        $("#deck").deck();
//    });
</script>
</body>
</html>